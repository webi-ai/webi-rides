type Profile_2 = record {
    "name": text;
    "description": text;
    "keywords": vec text;
};
type Profile = Profile_2;

type Driver_2 = record {
    "name": text;
    "contact": text;
    "email": text;
    "role": text;
    "vehicleplatenumber": text;
    "vehicleseatnumber": text;
    "vehiclemake": text;
    "vehiclemodel": text;
    "vehiclecolor": text;
    "vehicletype": text;
    "vehicleyear": text;
    "rating": float64;
    "currentstatus": variant {Active; Inactive;};
    "address": principal;
};

type Driver = Driver_2;

type Rider_2 = record {
    "name": text;
    "contact": text;
    "email": text;
    "role": text;
    "address": principal;
};

type Rider = Rider_2;


type Ride_2 = record {
    "rideid": text;
    "driver": Driver;
    "rider": Rider;
    "status": variant {Active; Completed; Cancelled;};
    "pickup": text;
    "dropoff": text;
    "timestamp": text;
    "rating": float64;
    "driverrating": float64;
    "riderrating": float64;
    "driverfeedback": text;
    "riderfeedback": text;
    "driverconfirmation": text;
    "riderconfirmation": text;

};

type Ride = Ride_2;


type Tokens = record {
    e8s: nat64
};

type TransferArgs = record {
    amount: Tokens;
    to_principal: principal;
    to_subaccount: opt blob
};

type Memo = nat64;

type TransferResult = variant {
    Ok: Memo;
    Err: text;
};

service : () -> {
    "transfer": (TransferArgs) -> (TransferResult);
    "getSelf": () -> (Profile_2) query;
    "get": (text) -> (Profile_2) query;
    "update": (Profile_2) -> ();
    "search": (text) -> (opt Profile_2) query;
    "get_driver": (text) -> (Driver_2) query;
    "get_rider": (text) -> (Rider_2) query;
    "get_ride": (text) -> (Ride_2) query;
    "getRides": () -> (vec Ride_2) query;
    "get_drivers": () -> (vec Driver_2) query;
    "get_riders": () -> (vec Rider_2) query;
    "registerRider": (Rider_2) -> ();
    "registerDriver": (Driver_2) -> ();
    "registerRide": (Ride_2) -> ();
}
