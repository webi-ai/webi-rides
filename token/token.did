type Profile_2 = record {
    "name": text;
    "description": text;
    "keywords": vec text;
};
type Profile = Profile_2;

type Driver_2 = record {
    "name": text;
    "contact": text;
    "email": text;
    "role": text;
    "vehicleplatenumber": text;
    "vehicleseatnumber": text;
    "vehiclemake": text;
    "vehiclemodel": text;
    "vehiclecolor": text;
    "vehicletype": text;
    "vehicleyear": text;
    "rating": text;
    "currentstatus": text;
    "address": text;
};

type Driver = Driver_2;

type Rider_2 = record {
    "name": text;
    "contact": text;
    "email": text;
    "role": text;
    "address": principal;
};



type Ride_2 = record {
    "id": text;
    "driver": text;
    "rider": text;
    "status": text;
    "pickup": text;
    "dropoff": text;
    "pickupaddress": text;
    "dropoffaddress": text;
    "pickupdatetime": text;
    "dropoffdatetime": text;
    "price": text;
    "rating": text;
    "driverrating": text;
    "riderrating": text;
    "driverfeedback": text;
    "riderfeedback": text;
    "driverconfirmation": text;
    "riderconfirmation": text;

};

type Tokens = record {
    e8s: nat64
};

type TransferArgs = record {
    amount: Tokens;
    to_principal: principal;
    to_subaccount: opt blob
};

type Memo = nat64;

type TransferResult = variant {
    Ok: Memo;
    Err: text;
};

service : () -> {
    "transfer": (TransferArgs) -> (TransferResult);
    "getSelf": () -> (Profile_2) query;
    "get": (text) -> (Profile_2) query;
    "update": (Profile_2) -> ();
    "search": (text) -> (opt Profile_2) query;
    "get_driver": (text) -> (Driver_2) query;
    "get_rider": (text) -> (Rider_2) query;
    "get_ride": (text) -> (Ride_2) query;
    "get_rides": () -> (vec Ride_2) query;
    "get_drivers": () -> (vec Driver_2) query;
    "get_riders": () -> (vec Rider_2) query;
    "registerRider": (Rider_2) -> ();
    "register_driver": (text) -> (Driver_2) query;
}
